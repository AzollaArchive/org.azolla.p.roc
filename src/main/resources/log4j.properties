# Azolla log4j config templates

# Level : TRACE->DEBUG->INFO->WARN->ERROR->FATAL

# log4j.debug : Defining this value makes log4j print log4j-internal debug statements to <code>System.out</code>.
# log4j.configDebug : [log4j.configDebug] is deprecated. Use [log4j.debug] instead.

# log4j.reset : if log4j.reset=true then reset hierarchy

# log4j.threshold : Level (Perhaps more advanced usage)

# log4j.rootLogger : Level, appender ...
# log4j.rootCategory : bad used, use [log4j.rootLogger]

# %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
# %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
# %r: 输出自应用启动到输出该log信息耗费的毫秒数
# %c: 输出日志信息所属的类目，通常就是所在类的全名
# %t: 输出产生该日志事件的线程名
# %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
# %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
# %%: 输出一个"%"字符
# %F: 输出日志消息产生时所在的文件名称
# %L: 输出代码中的行号
# %m: 输出代码中指定的消息,产生的日志具体信息
# %n: 输出一个回车换行符，Windows平台为"\r\n"，Unix平台为"\n"输出日志信息换行
# 可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：
#   1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
#   2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，"-"号指定左对齐。
#   3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
#   4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉。

# Set root category priority to INFO and its only appender to CONSOLE.
#log4j.rootCategory=INFO, CONSOLE
log4j.rootCategory=ERROR, CONSOLE, LOGFILEDAY

# CONSOLE is set to be a ConsoleAppender using a PatternLayout.
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
#log4j.appender.CONSOLE.Threshold=INFO
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
#log4j.appender.CONSOLE.layout.ConversionPattern=- %m%n
log4j.appender.CONSOLE.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss,SSS}] [%t] %-5p %l %x - %m%n

# LOGFILE is set to be a FileAppender using a PatternLayout.
log4j.appender.LOGFILE=org.apache.log4j.FileAppender
log4j.appender.LOGFILE.File=${user.home}/Azolla/logs/org.azolla.p.roc.log
log4j.appender.LOGFILE.Append=true
#log4j.appender.LOGFILE.Threshold=INFO
log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayout
log4j.appender.LOGFILE.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss,SSS}] [%t] %-5p %l %x - %m%n

# LOGFILEDAY is set to be a DailyRollingFileAppender using a PatternLayout.
log4j.appender.LOGFILEDAY=org.apache.log4j.DailyRollingFileAppender
log4j.appender.LOGFILEDAY.File=${user.home}/Azolla/logs/org.azolla.open.log
log4j.appender.LOGFILEDAY.DatePattern='.'yyyy-MM-dd
log4j.appender.LOGFILEDAY.Append=true
#log4j.appender.LOGFILE.Threshold=INFO
log4j.appender.LOGFILEDAY.layout=org.apache.log4j.PatternLayout
log4j.appender.LOGFILEDAY.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss,SSS}] [%t] %-5p %l %x - %m%n
